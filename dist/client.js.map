{"version":3,"file":"client.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAFA;AAKA;;AAEA;AACA;AAEA;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAMA;;AAIA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;AAGA;AAAA;AAAA;AACA;AACA;AAGA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;AAGA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAFA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAFA;;AAMA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAFA;AAMA;;AAvLA;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;;AAIA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAMA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AACA;AALA;AAaA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AChvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA","sources":["webpack://camunda-modeler-autosave-plugin/./client/AutoSavePlugin.js","webpack://camunda-modeler-autosave-plugin/./client/ConfigModal.js","webpack://camunda-modeler-autosave-plugin/./node_modules/camunda-modeler-plugin-helpers/components.js","webpack://camunda-modeler-autosave-plugin/./node_modules/camunda-modeler-plugin-helpers/index.js","webpack://camunda-modeler-autosave-plugin/./node_modules/camunda-modeler-plugin-helpers/react.js","webpack://camunda-modeler-autosave-plugin/webpack/bootstrap","webpack://camunda-modeler-autosave-plugin/webpack/runtime/compat get default export","webpack://camunda-modeler-autosave-plugin/webpack/runtime/define property getters","webpack://camunda-modeler-autosave-plugin/webpack/runtime/hasOwnProperty shorthand","webpack://camunda-modeler-autosave-plugin/webpack/runtime/make namespace object","webpack://camunda-modeler-autosave-plugin/./client/index.js"],"sourcesContent":["/**\r\n * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\r\n * under one or more contributor license agreements. See the NOTICE file\r\n * distributed with this work for additional information regarding copyright\r\n * ownership.\r\n *\r\n * Camunda licenses this file to you under the MIT; you may not use this file\r\n * except in compliance with the MIT License.\r\n */\r\n\r\n/* eslint-disable no-unused-vars*/\r\nimport React, { Fragment, PureComponent } from 'camunda-modeler-plugin-helpers/react';\r\nimport { Fill } from 'camunda-modeler-plugin-helpers/components';\r\n\r\nimport ConfigModal from './ConfigModal';\r\n\r\nconst defaultState = {\r\n  enabled: false,\r\n  interval: 5,\r\n  configOpen: false\r\n};\r\n\r\n/**\r\n * An example client extension plugin to enable auto saving functionality\r\n * into the Camunda Modeler\r\n */\r\nexport default class AutoSavePlugin extends PureComponent {\r\n  activeTab = {\r\n    id: '__empty',\r\n    type: 'empty'\r\n  };\r\n\r\n  directEditingActivated = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = defaultState;\r\n\r\n    this.handleConfigClosed = this.handleConfigClosed.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    /**\r\n    * The component props include everything the Application offers plugins,\r\n    * which includes:\r\n    * - config: save and retrieve information to the local configuration\r\n    * - subscribe: hook into application events, like <tab.saved>, <app.activeTabChanged> ...\r\n    * - triggerAction: execute editor actions, like <save>, <open-diagram> ...\r\n    * - log: log information into the Log panel\r\n    * - displayNotification: show notifications inside the application\r\n    */\r\n    const {\r\n      config,\r\n      subscribe\r\n    } = this.props;\r\n\r\n    // retrieve plugin related information from the application configuration\r\n    config.getForPlugin('autoSave', 'config')\r\n      .then(config => this.setState(config));\r\n\r\n    // subscribe to the creation of the BPMN modeler to detect modeling events\r\n    subscribe('bpmn.modeler.created', ({ modeler }) => {\r\n      const eventBus = modeler.get('eventBus');\r\n\r\n      eventBus.on('directEditing.activate', () => this.directEditingActivated = true);\r\n      eventBus.on('directEditing.deactivate', () => this.directEditingActivated = false);\r\n    });\r\n\r\n    // subscribe to the creation of the DMN modeler to detect modeling events\r\n    subscribe('dmn.modeler.created', ({ modeler }) => {\r\n      const eventBus = modeler._eventBus;\r\n      var mayChangeDirectEditingState = true;\r\n\r\n      // workaround to ensure proper detection of the direct editing state as the fired event of the\r\n      // DMN modeler doesn't differentiate\r\n      eventBus.on('view.selectionChanged', event => {\r\n        if (modeler._activeView.type === 'drd') {\r\n          mayChangeDirectEditingState = event.oldSelection.length != event.newSelection.length;\r\n        }\r\n      });\r\n\r\n      eventBus.on('view.directEditingChanged', () => {\r\n        if (mayChangeDirectEditingState) {\r\n          this.directEditingActivated = true;\r\n        } else {\r\n          this.directEditingActivated = false;\r\n        }\r\n\r\n        mayChangeDirectEditingState = false;\r\n      });\r\n    });\r\n\r\n    // subscribe to the creation of the CMMN modeler to detect modeling events\r\n    subscribe('cmmn.modeler.created', ({ modeler }) => {\r\n      const eventBus = modeler.get('eventBus');\r\n\r\n      eventBus.on('directEditing.activate', () => this.currentlyEditing = true);\r\n      eventBus.on('directEditing.deactivate', () => this.currentlyEditing = false);\r\n    });\r\n\r\n    // subscribe to the event when the active tab changed in the application\r\n    subscribe('app.activeTabChanged', ({ activeTab }) => {\r\n      this.clearTimer();\r\n      this.activeTab = activeTab;\r\n\r\n      if (this.state.enabled && activeTab.file && activeTab.file.path) {\r\n        this.setupTimer();\r\n      }\r\n    });\r\n\r\n    // subscribe to the event when a tab was saved in the application\r\n    subscribe('tab.saved', () => {\r\n      if (!this.timer && this.state.enabled) {\r\n        this.setupTimer();\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const {\r\n      configOpen,\r\n      enabled\r\n    } = this.state;\r\n\r\n    if (!enabled || configOpen) {\r\n      this.clearTimer();\r\n    }\r\n\r\n    if (!this.timer && !configOpen && enabled && this.activeTab.file && this.activeTab.file.path) {\r\n      this.setupTimer();\r\n    }\r\n  }\r\n\r\n  setupTimer() {\r\n    this.timer = setTimeout(() => {\r\n      if (!this.directEditingActivated) {\r\n        this.save();\r\n      }\r\n\r\n      this.setupTimer();\r\n    }, this.state.interval * 1000);\r\n  }\r\n\r\n  clearTimer() {\r\n    if (this.timer) {\r\n      clearTimeout(this.timer);\r\n      this.timer = null;\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const {\r\n      displayNotification,\r\n      triggerAction\r\n    } = this.props;\r\n\r\n    // trigger a tab save operation\r\n    triggerAction('save')\r\n      .then(tab => {\r\n        if (!tab) {\r\n          return displayNotification({ title: 'Failed to save' });\r\n        }\r\n      });\r\n  }\r\n\r\n  handleConfigClosed(newConfig) {\r\n    this.setState({ configOpen: false });\r\n\r\n    if (newConfig) {\r\n\r\n      // via <config> it is also possible to save data into the application configuration\r\n      this.props.config.setForPlugin('autoSave', 'config', newConfig)\r\n        .catch(console.error);\r\n\r\n      this.setState(newConfig);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * render any React component you like to extend the existing\r\n   * Camunda Modeler application UI\r\n   */\r\n  render() {\r\n    const {\r\n      enabled,\r\n      interval\r\n    } = this.state;\r\n\r\n    const initValues = {\r\n      enabled,\r\n      interval\r\n    };\r\n\r\n    // we can use fills to hook React components into certain places of the UI\r\n    return <Fragment>\r\n      <Fill slot=\"toolbar\" group=\"9_autoSave\">\r\n        <button type=\"button\" onClick={ () => this.setState({ configOpen: true }) }>\r\n          Configure autosave\r\n        </button>\r\n      </Fill>\r\n      { this.state.configOpen && (\r\n        <ConfigModal\r\n          onClose={ this.handleConfigClosed }\r\n          initValues={ initValues }\r\n        />\r\n      )}\r\n    </Fragment>;\r\n  }\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'camunda-modeler-plugin-helpers/react';\r\nimport { Modal } from 'camunda-modeler-plugin-helpers/components';\r\n\r\n\r\n// polyfill upcoming structural components\r\nconst Title = Modal.Title || (({ children }) => <h2>{ children }</h2>);\r\nconst Body = Modal.Body || (({ children }) => <div>{ children }</div>);\r\nconst Footer = Modal.Footer || (({ children }) => <div>{ children }</div>);\r\n\r\n// we can even use hooks to render into the application\r\nexport default function ConfigModal({ initValues, onClose }) {\r\n  const [ enabled, setEnabled ] = useState(initValues.enabled);\r\n  const [ interval, setAutoSaveInterval ] = useState(initValues.interval);\r\n\r\n  const onSubmit = () => onClose({ enabled, interval });\r\n\r\n  // we can use the built-in styles, e.g. by adding \"btn btn-primary\" class names\r\n  return <Modal onClose={ onClose }>\r\n    <Title>\r\n      AutoSave Configuration\r\n    </Title>\r\n\r\n    <Body>\r\n      <form id=\"autoSaveConfigForm\" onSubmit={ onSubmit }>\r\n        <p>\r\n          <label>\r\n            Enabled:\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"enabled\"\r\n              checked={ enabled }\r\n              onChange={ () => setEnabled(!enabled) }\r\n            />\r\n          </label>\r\n        </p>\r\n        <p>\r\n          <label>\r\n            Interval (seconds):\r\n            <input\r\n              type=\"number\"\r\n              name=\"interval\"\r\n              min=\"1\"\r\n              value={ interval }\r\n              onChange={ event => setAutoSaveInterval(Number(event.target.value)) }\r\n            />\r\n          </label>\r\n        </p>\r\n      </form>\r\n    </Body>\r\n\r\n    <Footer>\r\n      <div id=\"autoSaveConfigButtons\">\r\n        <button type=\"submit\" class=\"btn btn-primary\" form=\"autoSaveConfigForm\">Save</button>\r\n        <button type=\"button\" class=\"btn btn-secondary\" onClick={ () => onClose() }>Cancel</button>\r\n      </div>\r\n    </Footer>\r\n  </Modal>;\r\n}\r\n\r\n","if (!window.components) {\n  throw new Error('Not compatible with Camunda Modeler < 3.4');\n}\n\n/**\n * Fill component.\n *\n * @type {import('react').ComponentType<{ group: string, name: string }>}\n */\nexport const Fill = window.components.Fill;\n\n/**\n * Modal component.\n *\n * @type {import('react').ComponentType<{ onClose: Function }>}\n */\nexport const Modal = window.components.Modal;","/**\n * Validate and register a client plugin.\n *\n * @param {Object} plugin\n * @param {String} type\n */\nexport function registerClientPlugin(plugin, type) {\n  var plugins = window.plugins || [];\n  window.plugins = plugins;\n\n  if (!plugin) {\n    throw new Error('plugin not specified');\n  }\n\n  if (!type) {\n    throw new Error('type not specified');\n  }\n\n  plugins.push({\n    plugin: plugin,\n    type: type\n  });\n}\n\n/**\n * Validate and register a client plugin.\n *\n * @param {import('react').ComponentType} extension\n *\n * @example\n *\n * import MyExtensionComponent from './MyExtensionComponent';\n *\n * registerClientExtension(MyExtensionComponent);\n */\nexport function registerClientExtension(component) {\n  registerClientPlugin(component, 'client');\n}\n\n/**\n * Validate and register a bpmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerBpmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const BpmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerBpmnJSPlugin(BpmnJSModule);\n */\nexport function registerBpmnJSPlugin(module) {\n  registerClientPlugin(module, 'bpmn.modeler.additionalModules');\n}\n\n/**\n * Validate and register a bpmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerBpmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerBpmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerBpmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'bpmn.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a dmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerDmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerDmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerDmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'dmn.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a dmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerDmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const DmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\n * registerDmnJSPlugin(DmnJSModule, 'drd')\n */\nexport function registerDmnJSPlugin(module, components) {\n\n  if (!Array.isArray(components)) {\n    components = [ components ]\n  }\n\n  components.forEach(c => registerClientPlugin(module, `dmn.modeler.${c}.additionalModules`)); \n}\n\n/**\n * Return the modeler directory, as a string.\n *\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\n *\n * @return {String}\n */\nexport function getModelerDirectory() {\n  return window.getModelerDirectory();\n}\n\n/**\n * Return the modeler plugin directory, as a string.\n *\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\n *\n * @return {String}\n */\nexport function getPluginsDirectory() {\n  return window.getPluginsDirectory();\n}","if (!window.react) {\n  throw new Error('Not compatible with Camunda Modeler < 3.4');\n}\n\n/**\n * React object used by Camunda Modeler. Use it to create UI extension.\n *\n * @type {import('react')}\n */\nmodule.exports = window.react;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\r\n * under one or more contributor license agreements. See the NOTICE file\r\n * distributed with this work for additional information regarding copyright\r\n * ownership.\r\n *\r\n * Camunda licenses this file to you under the MIT; you may not use this file\r\n * except in compliance with the MIT License.\r\n */\r\n\r\nimport { registerClientExtension } from 'camunda-modeler-plugin-helpers';\r\n\r\nimport AutoSavePlugin from './AutoSavePlugin';\r\n\r\nregisterClientExtension(AutoSavePlugin);\r\n"],"names":[],"sourceRoot":""}